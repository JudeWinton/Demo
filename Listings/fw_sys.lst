C51 COMPILER V9.60.7.0   FW_SYS                                                            07/31/2023 14:33:30 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE FW_SYS
OBJECT MODULE PLACED IN .\Objects\fw_sys.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\fw_sys.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include) DEBUG
                    - PRINT(.\Listings\fw_sys.lst) OBJECT(.\Objects\fw_sys.obj)

line level    source

   1          // Copyright 2021 IOsetting <iosetting(at)outlook.com>
   2          //
   3          // Licensed under the Apache License, Version 2.0 (the "License");
   4          // you may not use this file except in compliance with the License.
   5          // You may obtain a copy of the License at
   6          //
   7          //     http://www.apache.org/licenses/LICENSE-2.0
   8          //
   9          // Unless required by applicable law or agreed to in writing, software
  10          // distributed under the License is distributed on an "AS IS" BASIS,
  11          // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  12          // See the License for the specific language governing permissions and
  13          // limitations under the License.
  14          
  15          #include "fw_sys.h"
  16          /**
  17           * 这是对一秒内指令周期的大致估计，可能会在不同的编译器甚至不同版本的编译器中有所不同，
  18           * 如果你发现延迟过慢或过快，可以调整它。
  19          */
  20          
  21          /**
  22           * An approximate estimate of instruction cycles in one second, may vary in
  23           * different compilers even differnt versions, adjust it if you find the
  24           * delay too slow or fast.
  25          */
  26          #if defined (__SDCC_SYNTAX_FIX)
                  #define __CLK_REF 10000
              #elif defined (SDCC) || defined (__SDCC)
                  #define __CLK_REF 9000
              #elif defined __CX51__ || defined __C51__
  31              #define __CLK_REF 10000
  32          #endif
  33          
  34          __CODE uint16_t ticks_ms    = (__CONF_FOSC / ((__CONF_CLKDIV == 0)? 1 : __CONF_CLKDIV) / __CLK_REF);
  35          __CODE uint8_t  ticks_us    = (__CONF_FOSC / ((__CONF_CLKDIV == 0)? 1 : __CONF_CLKDIV) / __CLK_REF / 1000)
             -;
  36          
  37          /**
  38           * 修改系统时钟
  39           * - 仅适用于SDCC编译器。
  40           * - 对于Keil C51编译器，使用STC-ISP进行IRC修整会更准确
  41           * - 在main()函数开始时调用这个函数
  42          */
  43          
  44          /**
  45           * Change system clock
  46           * - For SDCC only.
  47           * - For Keil C51, trim IRC in STC-ISP will be more accurate
  48           * - Invoke this in the beginning of main()
  49          */
  50          void SYS_SetClock(void)
  51          {
  52   1      #if defined (SDCC) || defined (__SDCC)
                  uint16_t i = 0; uint8_t j = 5;
C51 COMPILER V9.60.7.0   FW_SYS                                                            07/31/2023 14:33:30 PAGE 2   

                  P_SW2 = 0x80;
                  if (CLKDIV != (__CONF_CLKDIV))
                  {
                      CLKDIV = (__CONF_CLKDIV);
                      do { //更改时钟后等待一段时间，否则可能会阻塞主进程 Wait a while after clock changed, or it may bl
             -ock the main process
                          while (--i);
                      } while (--j);
                  }
                  P_SW2 = 0x00;
                  SYS_SetFOSC(__CONF_IRCBAND, __CONF_VRTRIM, __CONF_IRTRIM, __CONF_LIRTRIM);
                  while (--i); // Wait
              #endif
  66   1      }
  67          
  68          // 定义了一个函数，名为SYS_TrimClock，接受两个无符号8位整数参数
  69          void SYS_TrimClock(uint8_t vrtrim, uint8_t irtrim)
  70          {
  71   1          uint16_t i = 0;  // 定义一个无符号16位整数变量i，并初始化为0
  72   1          SYS_SetFOSC(__CONF_IRCBAND, vrtrim, irtrim, __CONF_LIRTRIM); // 调用SYS_SetFOSC函数，传入四个参数
  73   1          while (--i); // 当i递减后不为0时，继续等待
  74   1      }
  75          
  76          // 定义了一个函数，名为SYS_Delay，接受一个无符号16位整数参数
  77          void SYS_Delay(uint16_t t)
  78          {
  79   1          uint16_t i; // 定义一个无符号16位整数变量i
  80   1          do
  81   1          {
  82   2              i = ticks_ms;  // 将ticks_ms的值赋给i
  83   2              while (--i);   // 当i递减后不为0时，继续等待
  84   2          } while (--t);  // 当t递减后不为0时，继续执行上述do...while循环
  85   1      }
  86          
  87          // 定义了一个函数，名为SYS_DelayUs，接受一个无符号16位整数参数
  88          void SYS_DelayUs(uint16_t t)
  89          {
  90   1          uint8_t i;  // 定义一个无符号8位整数变量i
  91   1          do
  92   1          {
  93   2              i = ticks_us; // 将ticks_us的值赋给i
  94   2              while (--i);  // 当i递减后不为0时，继续等待
  95   2          } while (--t);   // 当t递减后不为0时，继续执行上述do...while循环
  96   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     71    ----
   CONSTANT SIZE    =      3    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
